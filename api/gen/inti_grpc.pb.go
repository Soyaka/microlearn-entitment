// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: inti.proto

package entitment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookmarkServiceClient is the client API for BookmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookmarkServiceClient interface {
	GetBookmark(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BookmarkRes, error)
}

type bookmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarkServiceClient(cc grpc.ClientConnInterface) BookmarkServiceClient {
	return &bookmarkServiceClient{cc}
}

func (c *bookmarkServiceClient) GetBookmark(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BookmarkRes, error) {
	out := new(BookmarkRes)
	err := c.cc.Invoke(ctx, "/BookmarkService/GetBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarkServiceServer is the server API for BookmarkService service.
// All implementations must embed UnimplementedBookmarkServiceServer
// for forward compatibility
type BookmarkServiceServer interface {
	GetBookmark(context.Context, *UserID) (*BookmarkRes, error)
	mustEmbedUnimplementedBookmarkServiceServer()
}

// UnimplementedBookmarkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookmarkServiceServer struct {
}

func (UnimplementedBookmarkServiceServer) GetBookmark(context.Context, *UserID) (*BookmarkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmark not implemented")
}
func (UnimplementedBookmarkServiceServer) mustEmbedUnimplementedBookmarkServiceServer() {}

// UnsafeBookmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarkServiceServer will
// result in compilation errors.
type UnsafeBookmarkServiceServer interface {
	mustEmbedUnimplementedBookmarkServiceServer()
}

func RegisterBookmarkServiceServer(s grpc.ServiceRegistrar, srv BookmarkServiceServer) {
	s.RegisterService(&BookmarkService_ServiceDesc, srv)
}

func _BookmarkService_GetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServiceServer).GetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookmarkService/GetBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServiceServer).GetBookmark(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// BookmarkService_ServiceDesc is the grpc.ServiceDesc for BookmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookmarkService",
	HandlerType: (*BookmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookmark",
			Handler:    _BookmarkService_GetBookmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inti.proto",
}

// InterestServiceClient is the client API for InterestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterestServiceClient interface {
	GetInterests(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*InterestRes, error)
}

type interestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterestServiceClient(cc grpc.ClientConnInterface) InterestServiceClient {
	return &interestServiceClient{cc}
}

func (c *interestServiceClient) GetInterests(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*InterestRes, error) {
	out := new(InterestRes)
	err := c.cc.Invoke(ctx, "/InterestService/GetInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterestServiceServer is the server API for InterestService service.
// All implementations must embed UnimplementedInterestServiceServer
// for forward compatibility
type InterestServiceServer interface {
	GetInterests(context.Context, *UserID) (*InterestRes, error)
	mustEmbedUnimplementedInterestServiceServer()
}

// UnimplementedInterestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterestServiceServer struct {
}

func (UnimplementedInterestServiceServer) GetInterests(context.Context, *UserID) (*InterestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterests not implemented")
}
func (UnimplementedInterestServiceServer) mustEmbedUnimplementedInterestServiceServer() {}

// UnsafeInterestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterestServiceServer will
// result in compilation errors.
type UnsafeInterestServiceServer interface {
	mustEmbedUnimplementedInterestServiceServer()
}

func RegisterInterestServiceServer(s grpc.ServiceRegistrar, srv InterestServiceServer) {
	s.RegisterService(&InterestService_ServiceDesc, srv)
}

func _InterestService_GetInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).GetInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InterestService/GetInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).GetInterests(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// InterestService_ServiceDesc is the grpc.ServiceDesc for InterestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InterestService",
	HandlerType: (*InterestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInterests",
			Handler:    _InterestService_GetInterests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inti.proto",
}

// ProgressServiceClient is the client API for ProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgressServiceClient interface {
	GetProgressList(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ProgressListRes, error)
}

type progressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProgressServiceClient(cc grpc.ClientConnInterface) ProgressServiceClient {
	return &progressServiceClient{cc}
}

func (c *progressServiceClient) GetProgressList(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ProgressListRes, error) {
	out := new(ProgressListRes)
	err := c.cc.Invoke(ctx, "/ProgressService/GetProgressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgressServiceServer is the server API for ProgressService service.
// All implementations must embed UnimplementedProgressServiceServer
// for forward compatibility
type ProgressServiceServer interface {
	GetProgressList(context.Context, *UserID) (*ProgressListRes, error)
	mustEmbedUnimplementedProgressServiceServer()
}

// UnimplementedProgressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProgressServiceServer struct {
}

func (UnimplementedProgressServiceServer) GetProgressList(context.Context, *UserID) (*ProgressListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgressList not implemented")
}
func (UnimplementedProgressServiceServer) mustEmbedUnimplementedProgressServiceServer() {}

// UnsafeProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgressServiceServer will
// result in compilation errors.
type UnsafeProgressServiceServer interface {
	mustEmbedUnimplementedProgressServiceServer()
}

func RegisterProgressServiceServer(s grpc.ServiceRegistrar, srv ProgressServiceServer) {
	s.RegisterService(&ProgressService_ServiceDesc, srv)
}

func _ProgressService_GetProgressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressServiceServer).GetProgressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProgressService/GetProgressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressServiceServer).GetProgressList(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgressService_ServiceDesc is the grpc.ServiceDesc for ProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProgressService",
	HandlerType: (*ProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgressList",
			Handler:    _ProgressService_GetProgressList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inti.proto",
}

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	GetSubscription(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*SubscriptionRes, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetSubscription(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*SubscriptionRes, error) {
	out := new(SubscriptionRes)
	err := c.cc.Invoke(ctx, "/SubscriptionService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	GetSubscription(context.Context, *UserID) (*SubscriptionRes, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) GetSubscription(context.Context, *UserID) (*SubscriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetSubscription(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscription",
			Handler:    _SubscriptionService_GetSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inti.proto",
}
